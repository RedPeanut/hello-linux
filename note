2019.04.07 백업용 및 외부전시용. github에 올려둠

2013.12.09 0.3.2에서 한번 끊기
2013.12.08 - 너무 오래 만지고 있어 0.3.2로 승격
- context switching 성공

2013.11.19 드디어 trap(exception+interrupt handler) 설치

2013.08.23 software context switching 까지 해보기
2013.06.30 inode, buffer_head, super_block, 등등에 대한 개념정립이 필요하다. 그리고나서 동작을 copy해야한다. 기계적인 타이핑으로는 이해가 되지 않는다. 
2013.06.26 페이징을 하려다 보니, 0x1000, 0x2000,... 위치에 page directory entry, page table entry를 기재하여다 보니, 이미지 올라가는 위치를 조정해야 하고, 이미지 올라가는 위치를 조정하려다 보니, bootsect에서 로딩하는 이미지를 판단해야하고, 이를 위해 linux의 build.c를 갖고와 고쳐 쓰려고 하는데... 구조변경이 심하여 0.3.0으로 버전업~
2013.06.06 os이름, linus어때? ㅎ

2012.02.17 커서위치가 맘에 안드는구나~
2012.02.16 2.4버전 driver makefile이 너무 복잡하여 1.0버전으로 복귀. console print 하다가 날새겠다.
2012.02.14 2.4버전 con_init 코드 옮기는 중. 힘들다. 복잡하다. 하기싫다. 
2012.02.08 폴더구조=linux, 코드=linux, 코딩배치및구조,스타일=chobits
2012.02.07 chobits OS 같은 경우는 코드가 굉장히 쉽고 명확한 느낌이고,
linux 코드는 chobits 보다 너저분하고 어렵다는 느낌이 든다.
왜 그럴까?
inline assem 때문일까?
로직 패턴이 일관성이 없어서 일까? 그렇다면 로직 패턴에 일관성을 주면서 로직을 유지시킨다면 깔끔해 보이고, 읽기가 편해질까?
chobits OS의 스케쥴링 정책은 Round Robin 이다.
2012.02.06 - interrupt handler 붙이는 중. bottom half 기능은 뺄까 넣을까 고민중. 
 - paging은 안 넣어도 되겠음. 추후를 고려한 제대로 된 페이징 기능은 너무 복잡할것 같음. 어줍잖은 paging 기능은 안 넣을까 함.
 - gcc-inline 어셈블 학습중. 
2012.02.05 - con_init 함수까지 붙여 넣었다. 근데 display가 안된다. 어디가 문젠지 모르겠다. ㅠ. 
 - Bochs로 잡았다. def_attr 을 attr에 옮겨주지 않았었다.
